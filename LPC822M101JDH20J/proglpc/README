
Why cant these folks (not just NXP, but others) stick to one protocol?
Or more accurately when you pretend to stick to one protocol be
consistent.  If the first one didnt respond with CR/LF then dont change
it.  If the first one didnt require CR/LF then dont change it.  If the
first one wanted uuencoded data, then dont change that.  If you are not
going to use uuencoded data, then why do this whole thing in ascii
anyway?  Start over, that is preferred to being wishy washy.

The fact that they do so much in decimal ASCII (instead of hex) is
disturbing as well makes you wonder about who is writing the
bootloader.  Since the thing changes every family or maybe more often,
perhaps that is just a contractor and that would make sense that it is
not consistent or maybe that person moved up in the company and a new
person moved in and wants to do it their own way, rest of the world be
damned...

All in all doesnt seem very professional for a product like this.
Again this is not just NXP that does this, others do similar things
as well.

At least we can be thankful they do have a strap and a bootloader to
keep our bad code from bricking the chip/board.




This is still a work in progress as I try to figure out the new
programming protocol.  Already found a problem with the documentation.

Eventually I will at least have one version of this that programs the
flash

proglpc /dev/ttyUSB22 myprog.bin

or whatever your serial port is and whatever binary you want to
program.

if you add a fourth item to the command line, anything, it will erase
the flash (or at least part of it, need to re-count the blocks/pages)

proglpc /dev/ttyUSB22 myprog.bin x

port opened
synchronized
echo off
.unlocked
Erase All
..erased

I will also want one that just loads and runs from ram if that is
possible to do.

